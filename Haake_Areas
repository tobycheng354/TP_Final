import math
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from matplotlib import rc
import matplotlib as mpl
from sklearn.metrics import r2_score
from sklearn.metrics import mean_squared_error
import statistics
import matplotlib.colors as colors
import matplotlib as mpl
import matplotlib.font_manager as font_manager

plt.style.use('default')
mpl.rcParams['font.family']='serif'
cmfont = font_manager.FontProperties(fname=mpl.get_data_path() + '/fonts/ttf/cmr10.ttf')
mpl.rcParams['font.serif']=cmfont.get_name()
mpl.rcParams['mathtext.fontset']='cm'
mpl.rcParams['axes.unicode_minus']=False


r = 0.0202
L = 0.008
ys = np.linspace(0, -0.031, 5000)

areas1 = []
areas2 = []
areas3 = []
areas4 = []
for y in ys:
    y2 = y+L
    if y + r > 0 and y > -L: #stage1
        a4 = 0
        a3 = 0.5 * ((2 * math.acos((r+y)/r)) - math.sin((2 * math.acos((r+y)/r)))) * (r**2)
        
        a1 = math.pi * (r**2 - (r+y)**2)
        a2 = 0
        
        areas1.append(a1)
        areas2.append(a2)
        areas3.append(a3)
        areas4.append(a4)
        
    elif  y + r > 0 and y <= -L: #stage2
        a4 = (0.5 * ((2 * math.acos((r+y+L)/r)) - math.sin((2 * math.acos((r+y+L)/r)))) * (r**2))
        a3 = (0.5 * ((2 * math.acos((r+y)/r)) - math.sin((2 * math.acos((r+y)/r)))) * (r**2)) - a4
        
        a1 = math.pi * (r**2 - (r+y)**2)
        a2 = math.pi * (r**2 - (r+y+L)**2)
        
        areas1.append(a1)
        areas2.append(a2)
        areas3.append(a3)
        areas4.append(a4)
    elif y + r <= 0 and y + r > -L: #stage3
        a4 = 0.5 * ((2 * math.acos((r+y+L)/r)) - math.sin((2 * math.acos((r+y+L)/r)))) * (r**2)
        a3 = 0.5 * math.pi * (r**2) - a4
        
        a1 = math.pi * r**2
        a2 = math.pi * (r**2 - (r+y+L)**2)
        
        areas1.append(a1)
        areas2.append(a2)
        areas3.append(a3)
        areas4.append(a4)   
    elif y + r <= 0 and y + r <= -L: #stage4
        a4 = 0.5 * math.pi * (r**2)
        a3 = 0
        
        a1 = math.pi * r**2
        a2 = math.pi * (r**2)
        
        areas1.append(a1)
        areas2.append(a2)
        areas3.append(a3)
        areas4.append(a4) 

font_size = 23
label_size = 16
ano_size = 14
fig, axs = plt.subplots(1,1,figsize=(15, 15))
axs.plot(areas1, ys, label = "A1", lw = 3)
axs.plot(areas2, ys, label = "A2", lw = 3)
axs.plot(areas3, ys, label = "A3", lw = 3)
axs.plot(areas4, ys, label = "A4", lw = 3)
axs.axhline(0, ls = "--", color = "black", lw = 1)
axs.axhline(-L, ls = "--", color = "black", lw = 1)
axs.axhline(-r, ls = "--", color = "black", lw = 1)
axs.axhline(-L-r, ls = '--', color = "black", lw = 1)
axs.set_xlabel("Area "+r"$(m^2)$", fontsize = font_size)
axs.set_ylabel(r"$y$"+" Displacement " + r"$(m)$", fontsize = font_size)
axs.tick_params(axis='both', which='major', labelsize=label_size)
axs.set_box_aspect(.7)
axs.set_ylim([-0.032, 0.001])
shifty = 0.002
shiftx = 0.0001
axs.annotate("Stage A", [0.0006 + shiftx, 0 - shifty], color = 'black', fontsize = ano_size)
axs.annotate("Stage B", [0.0006 + shiftx, -L- shifty], color = 'black', fontsize = ano_size)
axs.annotate("Stage C", [0.0006 + shiftx, -r- shifty], color = 'black', fontsize = ano_size)
axs.annotate("Stage D", [0.0006 + shiftx, -L-r- shifty], color = 'black', fontsize = ano_size)
axs.legend(loc=1, bbox_to_anchor=(0.96,0.93))
axs2 = axs.twinx()
axs2.set_yticks([0, -L, -r, -L-r])
axs2.set_yticklabels([r"$y = 0$", r"$y < -L$", r"$y < -r$", r"$y < -L-r$"])
axs2.tick_params(axis='both', which='major', labelsize=label_size)
axs2.set_ylim([-0.032, 0.001])
axs2.set_box_aspect(.7)
